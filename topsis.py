import numpy as np
import pandas as pd
from typing import List, Tuple, Dict
import textwrap


class FuzzyTOPSIS:
    def __init__(self, alternatives: List[str], criteria_names: List[str],
                 benefit_criteria: List[bool], p: float = 2):
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Fuzzy TOPSIS

        Parameters:
        alternatives - –Ω–∞–∑–≤–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
        criteria_names - –Ω–∞–∑–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        benefit_criteria - —Å–ø–∏—Å–æ–∫ boolean, True –¥–ª—è beneficial –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        p - –ø–∞—Ä–∞–º–µ—Ç—Ä –º–µ—Ç—Ä–∏–∫–∏ –ú–∏–Ω–∫–æ–≤—Å–∫–æ–≥–æ (p=2 –¥–ª—è –µ–≤–∫–ª–∏–¥–æ–≤–æ–π)
        """
        self.alternatives = alternatives
        self.criteria_names = criteria_names
        self.benefit_criteria = benefit_criteria
        self.p = p
        self.n_alternatives = len(alternatives)
        self.n_criteria = len(criteria_names)

        # DataFrames –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.original_data = None
        self.normalized_data = None
        self.weighted_data = None
        self.distances = None
        self.results = None

    def load_data(self, criteria_data: List[List[Tuple]], criteria_weights: List[Tuple]):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.criteria_data = criteria_data
        self.criteria_weights = [w[1] for w in criteria_weights]  # –ë–µ—Ä–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –≤–µ—Å–∞

        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        data_dict = {}
        for j, criterion_name in enumerate(self.criteria_names):
            data_dict[criterion_name] = [criteria_data[j][i] for i in range(self.n_alternatives)]

        self.original_data = pd.DataFrame(data_dict, index=self.alternatives)
        self.original_data.index.name = '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã'

        return self.original_data

    def normalize_matrix(self) -> pd.DataFrame:
        """–≠—Ç–∞–ø 1: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Ä–µ—à–µ–Ω–∏–π"""
        normalized_dict = {}

        for j, criterion_name in enumerate(self.criteria_names):
            criterion_data = self.criteria_data[j]
            normalized_values = []

            if self.benefit_criteria[j]:
                # Beneficial –∫—Ä–∏—Ç–µ—Ä–∏–∏: r_ij = x_ij / max(x_j)
                max_val = max([triplet[2] for triplet in criterion_data])  # max –ø–æ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–π
                for triplet in criterion_data:
                    normalized_triplet = (
                        triplet[0] / max_val,  # a/max
                        triplet[1] / max_val,  # b/max
                        triplet[2] / max_val  # c/max
                    )
                    normalized_values.append(normalized_triplet)
            else:
                # Cost –∫—Ä–∏—Ç–µ—Ä–∏–∏: r_ij = min(x_j) / x_ij
                min_val = min([triplet[0] for triplet in criterion_data])  # min –ø–æ –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω–æ–π
                for triplet in criterion_data:
                    normalized_triplet = (
                        min_val / triplet[2],  # min/c
                        min_val / triplet[1],  # min/b
                        min_val / triplet[0]  # min/a
                    )
                    normalized_values.append(normalized_triplet)

            normalized_dict[criterion_name] = normalized_values

        self.normalized_data = pd.DataFrame(normalized_dict, index=self.alternatives)
        self.normalized_data.index.name = '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã'

        return self.normalized_data

    def find_ideal_solutions(self) -> Tuple[Dict, Dict]:
        """–≠—Ç–∞–ø 2: –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
        self.fpis = {}  # Fuzzy Positive Ideal Solution
        self.fnis = {}  # Fuzzy Negative Ideal Solution

        for j, criterion_name in enumerate(self.criteria_names):
            criterion_values = self.normalized_data[criterion_name]

            if self.benefit_criteria[j]:
                # –î–ª—è beneficial: FPIS = –º–∞–∫—Å–∏–º—É–º, FNIS = –º–∏–Ω–∏–º—É–º
                self.fpis[criterion_name] = (
                    max([val[0] for val in criterion_values]),
                    max([val[1] for val in criterion_values]),
                    max([val[2] for val in criterion_values])
                )
                self.fnis[criterion_name] = (
                    min([val[0] for val in criterion_values]),
                    min([val[1] for val in criterion_values]),
                    min([val[2] for val in criterion_values])
                )
            else:
                # –î–ª—è cost: FPIS = –º–∏–Ω–∏–º—É–º, FNIS = –º–∞–∫—Å–∏–º—É–º
                self.fpis[criterion_name] = (
                    min([val[0] for val in criterion_values]),
                    min([val[1] for val in criterion_values]),
                    min([val[2] for val in criterion_values])
                )
                self.fnis[criterion_name] = (
                    max([val[0] for val in criterion_values]),
                    max([val[1] for val in criterion_values]),
                    max([val[2] for val in criterion_values])
                )

        return self.fpis, self.fnis

    def calculate_distances(self) -> pd.DataFrame:
        """–≠—Ç–∞–ø—ã 3-4: –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π —Å –≤–µ—Å–∞–º–∏"""

        def fuzzy_distance(triplet1: Tuple, triplet2: Tuple) -> float:
            """–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–µ—á–µ—Ç–∫–∏–º–∏ —á–∏—Å–ª–∞–º–∏"""
            a1, b1, c1 = triplet1
            a2, b2, c2 = triplet2
            return np.sqrt(1 / 3 * ((a1 - a2) ** 2 + (b1 - b2) ** 2 + (c1 - c2) ** 2))

        distances_data = []

        for i, alternative in enumerate(self.alternatives):
            sum_pos = 0
            sum_neg = 0

            for j, criterion_name in enumerate(self.criteria_names):
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                norm_value = self.normalized_data.loc[alternative, criterion_name]
                fpis_value = self.fpis[criterion_name]
                fnis_value = self.fnis[criterion_name]

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ –≤–µ—Å–æ–≤)
                dist_pos = fuzzy_distance(norm_value, fpis_value)
                dist_neg = fuzzy_distance(norm_value, fnis_value)

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä p –ü–û–°–õ–ï —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
                w_j = self.criteria_weights[j]
                sum_pos += (w_j ** self.p) * (dist_pos ** self.p)
                sum_neg += (w_j ** self.p) * (dist_neg ** self.p)

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ p
            d_plus = sum_pos ** (1 / self.p)
            d_minus = sum_neg ** (1 / self.p)

            distances_data.append({
                '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞': alternative,
                'D_plus': d_plus,
                'D_minus': d_minus
            })

        self.distances = pd.DataFrame(distances_data)
        return self.distances

    def calculate_closeness(self) -> pd.DataFrame:
        """–≠—Ç–∞–ø 5: –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –±–ª–∏–∑–æ—Å—Ç–∏"""
        if self.distances is None:
            self.calculate_distances()

        results_data = []

        for i, row in self.distances.iterrows():
            d_plus = row['D_plus']
            d_minus = row['D_minus']

            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–ª–∏–∑–æ—Å—Ç–∏: C_i = D_minus / (D_plus + D_minus)
            if d_plus + d_minus == 0:
                closeness = 0
            else:
                closeness = d_minus / (d_plus + d_minus)

            results_data.append({
                '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞': row['–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞'],
                'D_plus': d_plus,
                'D_minus': d_minus,
                '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏': closeness
            })

        self.results = pd.DataFrame(results_data)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –±–ª–∏–∑–æ—Å—Ç–∏
        self.results = self.results.sort_values('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏', ascending=False)
        self.results['–†–∞–Ω–≥'] = range(1, len(self.results) + 1)

        return self.results

    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ"""

        report = []
        report.append("# üìä –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê FUZZY TOPSIS")
        report.append("---")

        # 1. –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏
        report.append("## 1. –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ê–ù–ê–õ–ò–ó–ê")
        methodology = """
        –ú–µ—Ç–æ–¥ **Fuzzy TOPSIS** (Technique for Order Preference by Similarity to Ideal Solution) 
        –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –º–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏.

        **–û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –º–µ—Ç–æ–¥–∞:**
        - –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Ä–µ—à–µ–Ω–∏–π
        - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ—á–µ—Ç–∫–∏—Ö –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π (FPIS –∏ FNIS)
        - –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–æ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        - –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –±–ª–∏–∑–æ—Å—Ç–∏ –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤

        **–¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ –Ω–µ—á–µ—Ç–∫–∏–µ —á–∏—Å–ª–∞:** (a, b, c)
        - a - –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        - b - –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞  
        - c - –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        """
        report.append(textwrap.dedent(methodology))

        # 2. –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        report.append("## 2. –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï")
        report.append(f"- **–ö–æ–Ω—Ü–µ–ø—Ü–∏–∏:** {self.n_alternatives}")
        report.append(f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤:** {self.n_criteria}")
        report.append(f"- **–ü–∞—Ä–∞–º–µ—Ç—Ä –º–µ—Ç—Ä–∏–∫–∏ –ú–∏–Ω–∫–æ–≤—Å–∫–æ–≥–æ (p):** {self.p}")

        report.append("\n**–ö–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**")
        for i, alt in enumerate(self.alternatives, 1):
            report.append(f"  {i}. {alt}")

        report.append("\n**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:**")
        for i, (criterion, benefit) in enumerate(zip(self.criteria_names, self.benefit_criteria), 1):
            criterion_type = "üü¢ Beneficial (–±–æ–ª—å—à–µ = –ª—É—á—à–µ)" if benefit else "üî¥ Cost (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)"
            report.append(f"  {i}. **{criterion}** - {criterion_type}")

        # 3. –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        report.append("## 3. –¢–ê–ë–õ–ò–¶–ê –ò–°–•–û–î–ù–´–• –î–ê–ù–ù–´–•")

        # –°–æ–∑–¥–∞–µ–º Markdown —Ç–∞–±–ª–∏—Ü—É
        report.append("| –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ | –°–ª–æ–∂–Ω–æ—Å—Ç—å | –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å | –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ | –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å |")
        report.append("|-------------|-----------|---------------|------------|----------------|")

        for alt in self.alternatives:
            row = [alt]
            for criterion in self.criteria_names:
                triplet = self.original_data.loc[alt, criterion]
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º triplet –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                formatted_triplet = f"({triplet[0]}, {triplet[1]}, {triplet[2]})"
                row.append(formatted_triplet)
            report.append("| " + " | ".join(row) + " |")

        # 4. –í–µ—Å–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        report.append("## 4. –í–ï–°–ê –ö–†–ò–¢–ï–†–ò–ï–í")

        report.append("| –ö—Ä–∏—Ç–µ—Ä–∏–π | –í–µ—Å | –í–∞–∂–Ω–æ—Å—Ç—å |")
        report.append("|----------|-----|----------|")
        for criterion, weight in zip(self.criteria_names, self.criteria_weights):
            importance_pct = (weight / sum(self.criteria_weights)) * 100
            report.append(f"| {criterion} | {weight:.3f} | {importance_pct:.1f}% |")

        # 5. –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        report.append("## 5. –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –ú–ê–¢–†–ò–¶–ê –†–ï–®–ï–ù–ò–ô")
        report.append("*–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ –±–µ–∑—Ä–∞–∑–º–µ—Ä–Ω–æ–º—É –≤–∏–¥—É [0, 1]*")

        report.append("| –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ | –°–ª–æ–∂–Ω–æ—Å—Ç—å | –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å | –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ | –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å |")
        report.append("|-------------|-----------|---------------|------------|----------------|")

        for alt in self.alternatives:
            row = [alt]
            for criterion in self.criteria_names:
                triplet = self.normalized_data.loc[alt, criterion]
                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                formatted_triplet = f"({triplet[0]:.3f}, {triplet[1]:.3f}, {triplet[2]:.3f})"
                row.append(formatted_triplet)
            report.append("| " + " | ".join(row) + " |")

        # 6. –ò–¥–µ–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        report.append("## 6. –ò–î–ï–ê–õ–¨–ù–´–ï –†–ï–®–ï–ù–ò–Ø")

        report.append("| –ö—Ä–∏—Ç–µ—Ä–∏–π | FPIS | FNIS |")
        report.append("|----------|------|------|")
        for criterion in self.criteria_names:
            fpis_formatted = f"({self.fpis[criterion][0]:.3f}, {self.fpis[criterion][1]:.3f}, {self.fpis[criterion][2]:.3f})"
            fnis_formatted = f"({self.fnis[criterion][0]:.3f}, {self.fnis[criterion][1]:.3f}, {self.fnis[criterion][2]:.3f})"
            report.append(f"| {criterion} | {fpis_formatted} | {fnis_formatted} |")

        # 7. –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –±–ª–∏–∑–æ—Å—Ç–∏
        report.append("## 7. –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–û–í")

        report.append("- **D_plus** - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è")
        report.append("- **D_minus** - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è")
        report.append("- **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–ª–∏–∑–æ—Å—Ç–∏** = D_minus / (D_plus + D_minus)")

        report.append("")
        report.append("| –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ | D_plus | D_minus | –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–ª–∏–∑–æ—Å—Ç–∏ |")
        report.append("|--------------|--------|---------|----------------------|")

        for _, row in self.results.iterrows():
            report.append(
                f"| {row['–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞']} | {row['D_plus']:.6f} | {row['D_minus']:.6f} | {row['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏']:.6f} |")

        # 8. –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
        report.append("## 8. –ò–¢–û–ì–û–í–û–ï –†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í")

        report.append("| –†–∞–Ω–≥ | –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ | –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç | –°—Ç–∞—Ç—É—Å |")
        report.append("|------|-------------|-------------|--------|")

        for _, row in self.results.iterrows():
            status = "üèÜ **–õ–£–ß–®–ê–Ø**" if row['–†–∞–Ω–≥'] == 1 else ""
            report.append(
                f"| {int(row['–†–∞–Ω–≥'])} | {row['–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞']} | {row['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏']:.4f} | {status} |")

        # 9. –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append("## 9. –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")

        best_alt = self.results.iloc[0]
        worst_alt = self.results.iloc[-1]

        analysis = f"""
        **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç–æ–¥–æ–º Fuzzy TOPSIS:**

        - **–ù–∞–∏–ª—É—á—à–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:** **{best_alt['–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞']}**  
          (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–ª–∏–∑–æ—Å—Ç–∏: {best_alt['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏']:.4f})

        - **–ù–∞–∏—Ö—É–¥—à–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:** {worst_alt['–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞']}  
          (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–ª–∏–∑–æ—Å—Ç–∏: {worst_alt['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏']:.4f})

        - **–†–∞–∑–º–∞—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:** {best_alt['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏'] - worst_alt['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏']:.4f}

        **üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è **{best_alt['–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞']}**
        """
        report.append(textwrap.dedent(analysis))

        # 10. –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        report.append("## 10. –ê–ù–ê–õ–ò–ó –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–ò")

        closeness_values = self.results['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏'].values
        mean_closeness = np.mean(closeness_values)
        std_closeness = np.std(closeness_values)

        sensitivity = f"""
        - **–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–ª–∏–∑–æ—Å—Ç–∏:** {mean_closeness:.4f}
        - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:** {std_closeness:.4f}
        - **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏:** {(std_closeness / mean_closeness) * 100:.2f}%

        *–ß–µ–º –≤—ã—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ª—É—á—à–µ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–∞–¥ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏.*
        """
        report.append(textwrap.dedent(sensitivity))

        report.append("---")

        return "\n".join(report)
    def solve(self) -> pd.DataFrame:
        """–ü–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º Fuzzy TOPSIS"""
        print("üéØ –ó–ê–ü–£–°–ö –ú–ï–¢–û–î–ê FUZZY TOPSIS")
        print("=" * 60)

        # –≠—Ç–∞–ø 1: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        print("\n1. –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ê–¢–†–ò–¶–´ –†–ï–®–ï–ù–ò–ô:")
        norm_df = self.normalize_matrix()
        print(norm_df)

        # –≠—Ç–∞–ø 2: –ò–¥–µ–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        print("\n2. –ò–î–ï–ê–õ–¨–ù–´–ï –†–ï–®–ï–ù–ò–ò:")
        fpis, fnis = self.find_ideal_solutions()
        ideal_df = pd.DataFrame({'FPIS': fpis, 'FNIS': fnis})
        print(ideal_df)

        # –≠—Ç–∞–ø—ã 3-4: –†–∞—Å—Å—Ç–æ—è–Ω–∏—è
        print("\n3. –†–ê–°–°–¢–û–Ø–ù–ò–Ø –î–û –ò–î–ï–ê–õ–¨–ù–´–• –†–ï–®–ï–ù–ò–ô:")
        dist_df = self.calculate_distances()
        print(dist_df)

        # –≠—Ç–∞–ø 5: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –±–ª–∏–∑–æ—Å—Ç–∏
        print("\n4. –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        results_df = self.calculate_closeness()
        print(results_df.to_string(index=False))

        # –õ—É—á—à–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
        best = results_df.iloc[0]
        print(f"\nüèÜ –ù–ê–ò–õ–£–ß–®–ê–Ø –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: {best['–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞']} "
              f"(–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {best['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏']:.4f})")

        return results_df


# –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê
alternatives = ["–°—Ç—É–¥.–ø—Ä–æ–µ–∫—Ç—ã", "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã", "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"]
criteria_names = ["–°–ª–æ–∂–Ω–æ—Å—Ç—å", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å"]

# –¢–∏–ø—ã –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: True = beneficial (–±–æ–ª—å—à–µ=–ª—É—á—à–µ), False = cost (–º–µ–Ω—å—à–µ=–ª—É—á—à–µ)
benefit_criteria = [False, True, True, True]  # –°–ª–æ–∂–Ω–æ—Å—Ç—å - cost, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - beneficial

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ –Ω–µ—á–µ—Ç–∫–∏–µ —á–∏—Å–ª–∞)
criteria_data = [
    # –°–ª–æ–∂–Ω–æ—Å—Ç—å (cost)
    [(5, 4, 3), (6, 5, 4), (7, 6, 5), (8, 7, 6)],
    # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å (beneficial)
    [(4, 5, 5), (6, 7, 8), (9, 9, 9), (8, 9, 10)],
    # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ (beneficial)
    [(8, 8, 9), (7, 7, 8), (5, 6, 6), (5, 6, 7)],
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å (beneficial)
    [(6, 7, 7), (6, 7, 8), (9, 9, 10), (4, 7, 8)]
]

# –í–µ—Å–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
criteria_weights = [(0.266, 0.266, 0.266), (0.123, 0.123, 0.123),
                    (0.097, 0.097, 0.097), (0.514, 0.514, 0.514)]

# –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê
print("üìä –ê–ù–ê–õ–ò–ó –ö–û–ù–¶–ï–ü–¶–ò–ô –ü–†–û–ì–†–ê–ú–ú–ù–´–• –ü–†–û–ï–ö–¢–û–í")
print("=" * 50)

# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
topsis_analysis = FuzzyTOPSIS(
    alternatives=alternatives,
    criteria_names=criteria_names,
    benefit_criteria=benefit_criteria,
    p=2  # –ï–≤–∫–ª–∏–¥–æ–≤–∞ –º–µ—Ç—Ä–∏–∫–∞
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
original_df = topsis_analysis.load_data(criteria_data, criteria_weights)

print("–ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
print(original_df)
print("\n–í–ï–°–ê –ö–†–ò–¢–ï–†–ò–ï–í:", topsis_analysis.criteria_weights)

# –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
final_results = topsis_analysis.solve()

# –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û –û–¢–ß–ï–¢–ê
print("\n" + "=" * 80)
print("üìà –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û –û–¢–ß–ï–¢–ê –í MARKDOWN")
print("=" * 80)

full_report = topsis_analysis.generate_report()
print(full_report)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ MD —Ñ–∞–π–ª
with open('fuzzy_topsis_report.md', 'w', encoding='utf-8') as f:
    f.write(full_report)

print("\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: fuzzy_topsis_report.md")

# –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–º –∫—Ä–∞—Å–∏–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
#with open('fuzzy_topsis_report.txt', 'w', encoding='utf-8') as f:
 #   # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
  #  f.write(full_report.replace('**', '').replace('## ', '\n').replace('# ', '\n'))

# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø
print("\n" + "=" * 60)
print("üìà –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –û–¢–ß–ï–¢–ê")
print("=" * 60)

print("\n–°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
summary_df = final_results.copy()
summary_df['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏'] = summary_df['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏'].round(4)
summary_df['D_plus'] = summary_df['D_plus'].round(4)
summary_df['D_minus'] = summary_df['D_minus'].round(4)
print(summary_df.to_string(index=False))

print(f"\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
print(f"–õ—É—á—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {final_results['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏'].max():.4f}")
print(f"–•—É–¥—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {final_results['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏'].min():.4f}")
print(f"–†–∞–∑–º–∞—Ö: {final_results['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏'].max() - final_results['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–±–ª–∏–∑–æ—Å—Ç–∏'].min():.4f}")